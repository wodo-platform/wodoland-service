import { GameCharacters } from '@prisma/client';
import {
  Get,
  Post,
  Body,
  Put,
  Delete,
  Param,
  Query,
  Controller,
  HttpCode,
  ParseIntPipe,
  ParseBoolPipe,
  Request,
  UseGuards,
} from '@nestjs/common';
import { JwtAuthGuard } from '../../auth/jwt-auth.guard';
import {
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiTags,
  ApiParam,
} from '@nestjs/swagger';
import { GameCharacterCreateDto } from '../../dto/gameCharacter/gameCharacter.create.dto';
import { GameCharacterUpdateDto } from '../../dto/gameCharacter/gameCharacter.update.dto';
import { GameCharacterService } from './gameCharacter.service';
import { ValidationPipe } from '../../common/pipes/validation.pipe';
import {
  VALIDATION_SCHEMA_DEMO_CREATE,
  VALIDATION_SCHEMA_DEMO_UPDATE,
} from '../../common/pipes/validation';

// @ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@ApiTags('gameCharacters')
@Controller('gameCharacters')
export class GameCharacterController {
  constructor(private readonly GameCharacterService: GameCharacterService) {}

  @ApiOperation({ summary: 'Create gameCharacter' })
  @ApiResponse({
    status: 201,
    description: 'The gameCharacter has been successfully created.',
  })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Post()
  async createGameCharacter(
    @Body()
    GameCharacterCreateDto: // @Body(new ValidationPipe(VALIDATION_SCHEMA_DEMO_CREATE))
    GameCharacterCreateDto,
  ) {
    return await this.GameCharacterService.create(GameCharacterCreateDto);
  }

  @ApiOperation({ summary: 'Update gameCharacter' })
  @ApiResponse({
    status: 201,
    description: 'The gameCharacter has been successfully updated.',
  })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Put()
  async updateGameCharacter(
    @Body(new ValidationPipe(VALIDATION_SCHEMA_DEMO_UPDATE))
    GameCharacterUpdateDto: GameCharacterUpdateDto,
  ) {
    return await this.GameCharacterService.update(GameCharacterUpdateDto);
  }

  @ApiOperation({ summary: 'Find all gameCharacters' })
  @ApiResponse({ status: 200, description: 'Return all gameCharacters.' })
  @Get('')
  async findAll(): Promise<GameCharacters[]> {
    return await this.GameCharacterService.findAll(null, null, null);
  }

  @ApiOperation({
    summary: 'Find all gameCharacters by the given query string params.',
  })
  @ApiResponse({ status: 200, description: 'Return all gameCharacters.' })
  @Get('filter')
  async findByQueryParam(
    @Query('desc') desc: string,
    @Query('deleted', ParseBoolPipe) active: boolean,
  ): Promise<GameCharacters[]> {
    return await this.GameCharacterService.findAll(null, null, null);
  }

  @ApiOperation({ summary: 'Find gameCharacter by id.' })
  @ApiParam({
    name: 'id',
    description:
      'Unique numeric gameCharacter id generated by the system for the gameCharacter entities.',
    required: false,
    allowEmptyValue: false,
  })
  @ApiResponse({
    status: 200,
    description: 'Return gameCharacter found by the given id.',
  })
  @Get('/resources/:id')
  async findById(
    @Param('id', ParseIntPipe) id: number,
  ): Promise<GameCharacters> {
    return await this.GameCharacterService.findById(id);
  }

  @ApiOperation({ summary: 'Find gameCharacters by uid.' })
  @ApiParam({
    name: 'uid',
    description: 'User id',
    required: true,
    allowEmptyValue: false,
  })
  @ApiResponse({
    status: 200,
    description: 'Return gameCharacter found by the given id.',
  })
  @Get('/game_characters/:uid')
  async findByUid(
    @Param('uid', ParseIntPipe) uid: number,
  ): Promise<GameCharacters[]> {
    return await this.GameCharacterService.findByUid(uid);
  }

  @HttpCode(204)
  @ApiOperation({ summary: 'Delete gameCharacter' })
  @ApiResponse({
    status: 204,
    description: 'The gameCharacter has been successfully deleted.',
  })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Delete(':id')
  async delete(@Param() params) {
    return this.GameCharacterService.delete(params.id);
  }
}
