import { DemoUser } from '@prisma/client';
import {
  Get,
  Post,
  Body,
  Put,
  Delete,
  Param,
  Query,
  Controller,
  HttpCode,
  ParseIntPipe,
  ParseBoolPipe,
  Request,
  UseGuards,
} from '@nestjs/common';
import { JwtAuthGuard } from '../../auth/jwt-auth.guard';
import {
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiTags,
  ApiParam,
} from '@nestjs/swagger';
import { DemoUserCreateDto } from '../../dto/demoUser/demoUser.create.dto';
import { DemoUserUpdateDto } from '../../dto/demoUser/demoUser.update.dto';
import { DemoUserService } from './demoUser.service';
import { ValidationPipe } from '../../common/pipes/validation.pipe';
import {
  VALIDATION_SCHEMA_DEMO_CREATE,
  VALIDATION_SCHEMA_DEMO_UPDATE,
} from '../../common/pipes/validation';

// @ApiBearerAuth()
@ApiTags('demoUsers')
@Controller('demoUsers')
export class DemoUserController {
  constructor(private readonly DemoUserService: DemoUserService) {}

  @ApiOperation({ summary: 'Create demoUser' })
  @ApiResponse({
    status: 201,
    description: 'The demoUser has been successfully created.',
  })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Post()
  async createDemoUser(
    @Body()
    DemoUserCreateDto: // @Body(new ValidationPipe(VALIDATION_SCHEMA_DEMO_CREATE))
    DemoUserCreateDto,
  ) {
    return await this.DemoUserService.create(DemoUserCreateDto);
  }

  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: 'Update demoUser' })
  @ApiResponse({
    status: 201,
    description: 'The demoUser has been successfully updated.',
  })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Put()
  async updateDemoUser(
    @Body(new ValidationPipe(VALIDATION_SCHEMA_DEMO_UPDATE))
    DemoUserUpdateDto: DemoUserUpdateDto,
  ) {
    return await this.DemoUserService.update(DemoUserUpdateDto);
  }

  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: 'See if login is working' })
  @ApiResponse({ status: 200, description: 'See if user is still logged in' })
  @Get('/ping')
  async pingLogin(): Promise<boolean> {
    return true;
  }

  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: 'Find demoUser by id.' })
  @ApiParam({
    name: 'id',
    description:
      'Unique numeric demoUser id generated by the system for the demoUser entities.',
    required: false,
    allowEmptyValue: false,
  })
  @ApiResponse({
    status: 200,
    description: 'Return demoUser found by the given id.',
  })
  @Get('/resources/:id')
  async findById(@Param('id', ParseIntPipe) id: number): Promise<DemoUser> {
    return await this.DemoUserService.findById(id);
  }

  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: 'Find demoUser by email.' })
  @ApiResponse({
    status: 200,
    description: 'Return demoUser found by the given email.',
  })
  @Get('/email')
  async findByEmail(@Query('email') email: string): Promise<DemoUser> {
    return await this.DemoUserService.findByEmail(email);
  }

  @UseGuards(JwtAuthGuard)
  @ApiOperation({
    summary: 'Find all demoUsers by the given query string params.',
  })
  @ApiResponse({ status: 200, description: 'Return all demoUsers.' })
  @Get('/filter')
  async findByQueryParam(
    @Query('id') id: number,
    @Query('email') email: string,
    @Query('name') name: string,
    // @Query('active', ParseBoolPipe) active: boolean,
  ): Promise<DemoUser[]> {
    return await this.DemoUserService.findAll(id, name, email);
  }

  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: 'Find all demoUsers' })
  @ApiResponse({ status: 200, description: 'Return all demoUsers.' })
  @Get()
  async findAll(): Promise<DemoUser[]> {
    return await this.DemoUserService.findAll(null, null, null);
  }

  @UseGuards(JwtAuthGuard)
  @HttpCode(204)
  @ApiOperation({ summary: 'Delete demoUser' })
  @ApiResponse({
    status: 204,
    description: 'The demoUser has been successfully deleted.',
  })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Delete(':id')
  async delete(@Param() params) {
    return this.DemoUserService.delete(params.id);
  }
}
